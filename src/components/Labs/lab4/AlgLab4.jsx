'use client'

import React, { useState, useRef, useEffect } from 'react'
import styles from './AlgLab4.module.css'
import { HashTable, createHashTable } from '@/scripts/lab4/hashTable'

const AlgLab4 = () => {
  const [hashTable] = useState(() => createHashTable(1500))
  const [dataInput, setDataInput] = useState('')
  const [searchInput, setSearchInput] = useState('')
  const [segmentSearch, setSegmentSearch] = useState('')
  const [message, setMessage] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const [lastOperation, setLastOperation] = useState(null)
  const [tableItems, setTableItems] = useState([])
  const [stats, setStats] = useState({})
  const tableContainerRef = useRef(null)
  const fileInputRef = useRef(null)

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  useEffect(() => {
    updateDisplay()
  }, [])

  const updateDisplay = () => {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ 1500 —Å–µ–≥–º–µ–Ω—Ç–æ–≤
    const allItems = []
    for (let i = 0; i < 1500; i++) {
      const segment = hashTable.table[i] || []
      allItems.push({
        segment: i,
        items: [...segment],
        count: segment.length
      })
    }
    setTableItems(allItems)
    setStats(hashTable.getStatistics())
  }

  const handleAddData = () => {
    if (!dataInput.trim()) {
      setMessage('–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ')
      return
    }

    setIsLoading(true)
    setTimeout(() => {
      try {
        const result = hashTable.add(dataInput.trim())
        setLastOperation(result)
        
        if (result.operation === 'added') {
          setMessage(`‚úÖ –î–∞–Ω–Ω—ã–µ "${dataInput}" ‚Üí –∫–ª—é—á "${result.key}" ‚Üí —Å–µ–≥–º–µ–Ω—Ç ${result.hash}`)
        } else if (result.operation === 'exists') {
          setMessage(`‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ "${dataInput}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç (–∫–ª—é—á: "${result.key}")`)
        }
        
        setDataInput('')
        updateDisplay()
      } catch (error) {
        setMessage(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`)
      } finally {
        setIsLoading(false)
      }
    }, 300)
  }

  const handleSearchByData = () => {
    if (!searchInput.trim()) {
      setMessage('–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞')
      return
    }

    setIsLoading(true)
    setTimeout(() => {
      try {
        const result = hashTable.searchByData(searchInput.trim())
        if (result.count > 0) {
          setMessage(`‚úÖ –ù–∞–π–¥–µ–Ω–æ: –¥–∞–Ω–Ω—ã–µ "${searchInput}" ‚Üí –∫–ª—é—á "${result.key}" ‚Üí —Å–µ–≥–º–µ–Ω—Ç ${result.hash}`)
          
          // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É —Å–µ–≥–º–µ–Ω—Ç—É
          setTimeout(() => {
            scrollToSegment(result.hash)
          }, 100)
        } else {
          setMessage(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ: –¥–∞–Ω–Ω—ã–µ "${searchInput}" ‚Üí –∫–ª—é—á "${result.key}" ‚Üí —Å–µ–≥–º–µ–Ω—Ç ${result.hash}`)
        }
      } catch (error) {
        setMessage(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ${error.message}`)
      } finally {
        setIsLoading(false)
      }
    }, 300)
  }

  const handleSearchBySegment = () => {
    const segment = parseInt(segmentSearch)
    if (isNaN(segment) || segment < 0 || segment >= 1500) {
      setMessage('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å–µ–≥–º–µ–Ω—Ç–∞ (0-1499)')
      return
    }

    setIsLoading(true)
    setTimeout(() => {
      try {
        const result = hashTable.searchBySegment(segment)
        if (result.count > 0) {
          setMessage(`‚úÖ –í —Å–µ–≥–º–µ–Ω—Ç–µ ${segment} –Ω–∞–π–¥–µ–Ω–æ ${result.count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`)
          
          // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–º—É —Å–µ–≥–º–µ–Ω—Ç—É
          setTimeout(() => {
            scrollToSegment(segment)
          }, 100)
        } else {
          setMessage(`‚ÑπÔ∏è –í —Å–µ–≥–º–µ–Ω—Ç–µ ${segment} –Ω–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤`)
        }
      } catch (error) {
        setMessage(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`)
      } finally {
        setIsLoading(false)
      }
    }, 300)
  }

  const scrollToSegment = (segment) => {
    if (tableContainerRef.current) {
      const rowHeight = 40 // –ø—Ä–∏–º–µ—Ä–Ω–∞—è –≤—ã—Å–æ—Ç–∞ —Å—Ç—Ä–æ–∫–∏
      const scrollTo = segment * rowHeight
      tableContainerRef.current.scrollTo({
        top: scrollTo,
        behavior: 'smooth'
      })
    }
  }

  const handleRemoveData = () => {
    if (!dataInput.trim()) {
      setMessage('–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è')
      return
    }

    setIsLoading(true)
    setTimeout(() => {
      try {
        const result = hashTable.remove(dataInput.trim())
        if (result.removed > 0) {
          setMessage(`‚úÖ –î–∞–Ω–Ω—ã–µ "${dataInput}" —É–¥–∞–ª–µ–Ω—ã (–∫–ª—é—á: ${result.key})`)
          setDataInput('')
          updateDisplay()
        } else {
          setMessage(`‚ùå –î–∞–Ω–Ω—ã–µ "${dataInput}" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`)
        }
      } catch (error) {
        setMessage(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${error.message}`)
      } finally {
        setIsLoading(false)
      }
    }, 300)
  }

  const handleExportToFile = () => {
    setIsLoading(true)
    setTimeout(() => {
      try {
        const csvData = hashTable.exportToCSV()
        const blob = new Blob([csvData], { type: 'text/csv;charset=utf-8;' })
        const url = URL.createObjectURL(blob)
        const a = document.createElement('a')
        a.href = url
        a.download = 'hash_table_data.csv'
        a.click()
        URL.revokeObjectURL(url)
        
        setMessage('‚úÖ –î–∞–Ω–Ω—ã–µ –≤—ã–≥—Ä—É–∂–µ–Ω—ã –≤ —Ñ–∞–π–ª hash_table_data.csv')
      } catch (error) {
        setMessage(`‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ${error.message}`)
      } finally {
        setIsLoading(false)
      }
    }, 500)
  }

  const handleImportFromFile = (event) => {
    const file = event.target.files[0]
    if (!file) return

    setIsLoading(true)
    setTimeout(() => {
      try {
        // –î–µ–º–æ-–∏–º–ø–æ—Ä—Ç
        hashTable.reset()
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ä–∞–∑–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã
        const testData = [
          'Hello World', 'Test Data', 'Hash Table', 'Laboratory Work',
          'Open Hashing', 'Collision Resolution', 'Data Structure',
          'Algorithm', 'Programming', 'Computer Science'
        ]
        testData.forEach(data => hashTable.add(data))
        updateDisplay()
        setMessage(`‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞ ${file.name} (–¥–µ–º–æ)`)
        setIsLoading(false)
      } catch (error) {
        setMessage(`‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: ${error.message}`)
        setIsLoading(false)
      }
    }, 1000)
  }

  const handleResetTable = () => {
    hashTable.reset()
    setLastOperation(null)
    setMessage('üóëÔ∏è –•–µ—à-—Ç–∞–±–ª–∏—Ü–∞ —Å–±—Ä–æ—à–µ–Ω–∞')
    updateDisplay()
  }

  const handleKeyPress = (e, action) => {
    if (e.key === 'Enter') {
      action()
    }
  }

  return (
    <div className={styles.container}>
      <div className={styles.name}>
        <h1>–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞ 4: –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö</h1>
      </div>

      <section className={styles.section}>
        <h2>–¶–µ–ª—å —Ä–∞–±–æ—Ç—ã:</h2>
        <p>–ò–∑—É—á–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞–≤—ã–∫–æ–≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Ö–µ—à-—Ç–∞–±–ª–∏—Ü.</p>
        
        <h2>–ó–∞–¥–∞–Ω–∏–µ (–í–∞—Ä–∏–∞–Ω—Ç 9):</h2>
        <p>
          <strong>–§–æ—Ä–º–∞—Ç –∫–ª—é—á–∞:</strong> –ë—Ü—Ü—Ü—Ü–ë (–ë—É–∫–≤–∞+4 —Ü–∏—Ñ—Ä—ã+–ë—É–∫–≤–∞)<br/>
          <strong>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤:</strong> 1500<br/>
          <strong>–ú–µ—Ç–æ–¥ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–æ–ª–ª–∏–∑–∏–π:</strong> –û—Ç–∫—Ä—ã—Ç–æ–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ (—Ü–µ–ø–æ—á–∫–∏)
        </p>

        <div className={styles.mainGroup}>
          <div className={styles.mainGroupText}>
            <span>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ö–µ—à-—Ç–∞–±–ª–∏—Ü–µ–π</span>
          </div>

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ */}
          {lastOperation && (
            <div className={styles.lastOperation}>
              <h3>–ü–æ—Å–ª–µ–¥–Ω—è—è –æ–ø–µ—Ä–∞—Ü–∏—è:</h3>
              <div>–ö–ª—é—á: <strong>{lastOperation.key}</strong></div>
              <div>–°–µ–≥–º–µ–Ω—Ç: <strong>{lastOperation.hash}</strong></div>
              <div>–¢–∏–ø: <strong>{lastOperation.operation === 'added' ? '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ' : '–£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'}</strong></div>
            </div>
          )}

          {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã */}
          <div className={styles.systemStats}>
            <div className={styles.statItem}>
              <div className={styles.statValue}>{stats.totalElements || 0}</div>
              <div className={styles.statLabel}>–í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤</div>
            </div>
            <div className={styles.statItem}>
              <div className={styles.statValue}>{stats.usedSegments || 0}</div>
              <div className={styles.statLabel}>–ó–∞–Ω—è—Ç–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤</div>
            </div>
            <div className={styles.statItem}>
              <div className={styles.statValue}>{stats.emptySegments || 0}</div>
              <div className={styles.statLabel}>–°–≤–æ–±–æ–¥–Ω–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤</div>
            </div>
            <div className={styles.statItem}>
              <div className={styles.statValue}>{stats.maxChainLength || 0}</div>
              <div className={styles.statLabel}>–ú–∞–∫—Å. –¥–ª–∏–Ω–∞ —Ü–µ–ø–æ—á–∫–∏</div>
            </div>
            <div className={styles.statItem}>
              <div className={styles.statValue}>{stats.loadFactor || '0.0'}%</div>
              <div className={styles.statLabel}>–ö–æ—ç—Ñ. –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è</div>
            </div>
          </div>

          {/* –ë–ª–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ */}
          <div className={styles.inputGroup}>
            <div className={styles.taskInput}>
              <label>–î–∞–Ω–Ω—ã–µ: </label>
              <input
                type="text"
                placeholder="–õ—é–±—ã–µ –¥–∞–Ω–Ω—ã–µ..."
                value={dataInput}
                onChange={(e) => setDataInput(e.target.value)}
                onKeyPress={(e) => handleKeyPress(e, handleAddData)}
              />
            </div>
            
            <button 
              className={styles.buttonFillArray} 
              onClick={handleAddData}
              disabled={isLoading}
            >
              {isLoading ? '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ...' : '–î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'}
            </button>
            
            <button 
              className={styles.actionButton} 
              onClick={handleRemoveData}
              disabled={isLoading}
            >
              –£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
            </button>
          </div>

          {/* –ë–ª–æ–∫ –ø–æ–∏—Å–∫–∞ */}
          <div className={styles.inputGroup}>
            <div className={styles.taskInput}>
              <label>–ü–æ–∏—Å–∫ –ø–æ –¥–∞–Ω–Ω—ã–º: </label>
              <input
                type="text"
                placeholder="–õ—é–±—ã–µ –¥–∞–Ω–Ω—ã–µ..."
                value={searchInput}
                onChange={(e) => setSearchInput(e.target.value)}
                onKeyPress={(e) => handleKeyPress(e, handleSearchByData)}
              />
            </div>
            
            <button 
              className={styles.buttonFillArray} 
              onClick={handleSearchByData}
              disabled={isLoading}
            >
              {isLoading ? '–ü–æ–∏—Å–∫...' : '–ù–∞–π—Ç–∏ –ø–æ –¥–∞–Ω–Ω—ã–º'}
            </button>

            <div className={styles.taskInput}>
              <label>–ü–æ–∏—Å–∫ –ø–æ —Å–µ–≥–º–µ–Ω—Ç—É: </label>
              <input
                type="number"
                placeholder="0-1499"
                value={segmentSearch}
                onChange={(e) => setSegmentSearch(e.target.value)}
                min="0"
                max="1499"
                onKeyPress={(e) => handleKeyPress(e, handleSearchBySegment)}
              />
            </div>
            
            <button 
              className={styles.actionButton} 
              onClick={handleSearchBySegment}
              disabled={isLoading}
            >
              –ù–∞–π—Ç–∏ –≤ —Å–µ–≥–º–µ–Ω—Ç–µ
            </button>
          </div>

          {/* –ë–ª–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞–º–∏ */}
          <div className={styles.inputGroup}>
            <button 
              className={styles.buttonFillArray} 
              onClick={handleExportToFile}
              disabled={isLoading}
            >
              {isLoading ? '–≠–∫—Å–ø–æ—Ä—Ç...' : '–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV'}
            </button>
            
            <input
              type="file"
              accept=".csv,.txt"
              onChange={handleImportFromFile}
              ref={fileInputRef}
              style={{ display: 'none' }}
            />
            
            <button 
              className={styles.actionButton}
              onClick={() => fileInputRef.current?.click()}
              disabled={isLoading}
            >
              –ò–º–ø–æ—Ä—Ç –∏–∑ —Ñ–∞–π–ª–∞
            </button>
            
            <button 
              className={styles.stopButton} 
              onClick={handleResetTable}
            >
              –°–±—Ä–æ—Å —Ç–∞–±–ª–∏—Ü—ã
            </button>
          </div>

          {/* –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ö–µ—à-—Ç–∞–±–ª–∏—Ü—ã */}
          <div className={styles.hashVisualization}>
            <h3>–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ö–µ—à-—Ç–∞–±–ª–∏—Ü—ã (–≤—Å–µ 1500 —Å–µ–≥–º–µ–Ω—Ç–æ–≤)</h3>
            <div className={styles.tableInfo}>
              –í—Å–µ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤: {tableItems.length}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–∫—Ä—É—Ç–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.
            </div>
            <div className={styles.hashTableContainer}>
              <div 
                className={styles.tableWrapper}
                ref={tableContainerRef}
              >
                <div className={styles.tableHeader}>
                  <span>–°–µ–≥–º–µ–Ω—Ç</span>
                  <span>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</span>
                  <span>–î–∞–Ω–Ω—ã–µ ‚Üí –ö–ª—é—á</span>
                </div>
                <div className={styles.tableContent}>
                  {tableItems.map((segmentInfo) => (
                    <div 
                      key={segmentInfo.segment} 
                      className={styles.tableRow}
                      id={`segment-${segmentInfo.segment}`}
                    >
                      <span className={styles.segmentNumber}>{segmentInfo.segment}</span>
                      <span className={styles.segmentCount}>
                        {segmentInfo.count} —ç–ª–µ–º–µ–Ω—Ç(–æ–≤)
                      </span>
                      <div className={styles.segmentItems}>
                        {segmentInfo.count > 0 ? (
                          segmentInfo.items.map((item, itemIndex) => (
                            <div key={itemIndex} className={styles.dataItem}>
                              <span className={styles.originalData}>"{item.originalData}"</span>
                              <span className={styles.arrow}>‚Üí</span>
                              <span className={styles.generatedKey}>{item.key}</span>
                            </div>
                          ))
                        ) : (
                          <span className={styles.empty}>–ü—É—Å—Ç–æ</span>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </div>

          {/* –°–æ–æ–±—â–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã */}
          {message && (
            <div className={styles.result}>
              <span className={styles.resultText}>–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã</span>
              <div className={styles.resultContent}>
                {message}
              </div>
            </div>
          )}

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ */}
          <div className={styles.result}>
            <span className={styles.resultText}>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ</span>
            <div className={styles.resultContent}>
              <strong>–ü—Ä–æ—Ü–µ—Å—Å —Ä–∞–±–æ—Ç—ã:</strong> –î–∞–Ω–Ω—ã–µ ‚Üí –ö–ª—é—á (–ë—Ü—Ü—Ü—Ü–ë) ‚Üí –•–µ—à ‚Üí –°–µ–≥–º–µ–Ω—Ç<br/>
              <strong>–ú–µ—Ç–æ–¥ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è:</strong> –û—Ç–∫—Ä—ã—Ç–æ–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ (—Ü–µ–ø–æ—á–∫–∏)<br/>
              <strong>–§–æ—Ä–º–∞—Ç –∫–ª—é—á–∞:</strong> –ë—Ü—Ü—Ü—Ü–ë (–ë—É–∫–≤–∞+4 —Ü–∏—Ñ—Ä—ã+–ë—É–∫–≤–∞)<br/>
              <strong>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤:</strong> {stats.totalSegments || 1500}<br/>
              <strong>–§—É–Ω–∫—Ü–∏–∏:</strong> –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ, –ø–æ–∏—Å–∫, —ç–∫—Å–ø–æ—Ä—Ç/–∏–º–ø–æ—Ä—Ç
            </div>
          </div>
        </div>
      </section>
    </div>
  )
}

export default AlgLab4