'use client'

import React, { useState, useRef, useEffect } from 'react'
import styles from './AlgLab4.module.css'
import { HashTable, createHashTable } from '@/scripts/lab4/hashTable'

const AlgLab4 = () => {
  const [hashTable] = useState(() => createHashTable(1500))
  const [keyInput, setKeyInput] = useState('')
  const [valueInput, setValueInput] = useState('')
  const [searchKeyInput, setSearchKeyInput] = useState('')
  const [segmentSearch, setSegmentSearch] = useState('')
  const [textToEncrypt, setTextToEncrypt] = useState('')
  const [encryptedKey, setEncryptedKey] = useState('')
  const [message, setMessage] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const [lastOperation, setLastOperation] = useState(null)
  const [tableItems, setTableItems] = useState([])
  const [stats, setStats] = useState({})
  const tableContainerRef = useRef(null)
  const fileInputRef = useRef(null)

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  useEffect(() => {
    updateDisplay()
  }, [])

  const updateDisplay = () => {
    const allItems = []
    for (let i = 0; i < 1500; i++) {
      const segment = hashTable.table[i] || []
      allItems.push({
        segment: i,
        items: [...segment],
        count: segment.length
      })
    }
    setTableItems(allItems)
    setStats(hashTable.getStatistics())
  }

  // –§—É–Ω–∫—Ü–∏—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ –∫–ª—é—á
  const encryptTextToKey = () => {
    if (!textToEncrypt.trim()) {
      setMessage('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è')
      return
    }

    try {
      const key = hashTable.generateKeyFromText(textToEncrypt.trim())
      setEncryptedKey(key)
      setMessage(`‚úÖ –¢–µ–∫—Å—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω –≤ –∫–ª—é—á: ${key}`)
    } catch (error) {
      setMessage(`‚ùå –û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`)
    }
  }

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è (–∑–Ω–∞—á–µ–Ω–∏–µ ‚Üí –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–ª—é—á)
  const handleAddValue = () => {
    if (!valueInput.trim()) {
      setMessage('–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è')
      return
    }

    setIsLoading(true)
    setTimeout(() => {
      try {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á –∏–∑ –∑–Ω–∞—á–µ–Ω–∏—è
        const autoKey = hashTable.generateKeyFromText(valueInput.trim())
        const result = hashTable.add(autoKey, valueInput.trim())
        setLastOperation(result)
        
        if (result.operation === 'added') {
          setMessage(`‚úÖ –≠–ª–µ–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω: –∑–Ω–∞—á–µ–Ω–∏–µ "${valueInput}" ‚Üí –∫–ª—é—á "${autoKey}" ‚Üí —Å–µ–≥–º–µ–Ω—Ç ${result.hash}`)
        } else if (result.operation === 'updated') {
          setMessage(`‚úèÔ∏è –≠–ª–µ–º–µ–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω: –∑–Ω–∞—á–µ–Ω–∏–µ "${valueInput}" ‚Üí –∫–ª—é—á "${autoKey}" ‚Üí —Å–µ–≥–º–µ–Ω—Ç ${result.hash}`)
        }
        
        setValueInput('')
        updateDisplay()
      } catch (error) {
        setMessage(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`)
      } finally {
        setIsLoading(false)
      }
    }, 300)
  }

  // –†—É—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–ª—é—á–∞
  const handleAddWithKey = () => {
    if (!keyInput.trim()) {
      setMessage('–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á')
      return
    }
    if (!valueInput.trim()) {
      setMessage('–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ')
      return
    }

    setIsLoading(true)
    setTimeout(() => {
      try {
        const result = hashTable.add(keyInput.trim(), valueInput.trim())
        setLastOperation(result)
        
        if (result.operation === 'added') {
          setMessage(`‚úÖ –≠–ª–µ–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω: –∫–ª—é—á "${keyInput}" ‚Üí –∑–Ω–∞—á–µ–Ω–∏–µ "${valueInput}" ‚Üí —Å–µ–≥–º–µ–Ω—Ç ${result.hash}`)
        } else if (result.operation === 'updated') {
          setMessage(`‚úèÔ∏è –≠–ª–µ–º–µ–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω: –∫–ª—é—á "${keyInput}" ‚Üí –∑–Ω–∞—á–µ–Ω–∏–µ "${valueInput}" ‚Üí —Å–µ–≥–º–µ–Ω—Ç ${result.hash}`)
        }
        
        setKeyInput('')
        setValueInput('')
        updateDisplay()
      } catch (error) {
        setMessage(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`)
      } finally {
        setIsLoading(false)
      }
    }, 300)
  }

  // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
  const useEncryptedKey = () => {
    if (!encryptedKey) {
      setMessage('–°–Ω–∞—á–∞–ª–∞ –∑–∞—à–∏—Ñ—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç')
      return
    }
    setKeyInput(encryptedKey)
    setMessage(`üîë –ö–ª—é—á "${encryptedKey}" –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é`)
  }

  const handleSearchByKey = () => {
    if (!searchKeyInput.trim()) {
      setMessage('–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–ª—è –ø–æ–∏—Å–∫–∞')
      return
    }

    setIsLoading(true)
    setTimeout(() => {
      try {
        const result = hashTable.searchByKey(searchKeyInput.trim())
        if (result.count > 0) {
          const values = result.found.map(item => item.value).join(', ')
          setMessage(`‚úÖ –ù–∞–π–¥–µ–Ω–æ: –∫–ª—é—á "${searchKeyInput}" ‚Üí —Å–µ–≥–º–µ–Ω—Ç ${result.hash} ‚Üí –∑–Ω–∞—á–µ–Ω–∏—è: ${values}`)
          
          setTimeout(() => {
            scrollToSegment(result.hash)
          }, 100)
        } else {
          setMessage(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ: –∫–ª—é—á "${searchKeyInput}" ‚Üí —Å–µ–≥–º–µ–Ω—Ç ${result.hash}`)
        }
      } catch (error) {
        setMessage(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ${error.message}`)
      } finally {
        setIsLoading(false)
      }
    }, 300)
  }

  const handleSearchBySegment = () => {
    const segment = parseInt(segmentSearch)
    if (isNaN(segment) || segment < 0 || segment >= 1500) {
      setMessage('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å–µ–≥–º–µ–Ω—Ç–∞ (0-1499)')
      return
    }

    setIsLoading(true)
    setTimeout(() => {
      try {
        const result = hashTable.searchBySegment(segment)
        if (result.count > 0) {
          setMessage(`‚úÖ –í —Å–µ–≥–º–µ–Ω—Ç–µ ${segment} –Ω–∞–π–¥–µ–Ω–æ ${result.count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`)
          
          setTimeout(() => {
            scrollToSegment(segment)
          }, 100)
        } else {
          setMessage(`‚ÑπÔ∏è –í —Å–µ–≥–º–µ–Ω—Ç–µ ${segment} –Ω–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤`)
        }
      } catch (error) {
        setMessage(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`)
      } finally {
        setIsLoading(false)
      }
    }, 300)
  }

  const scrollToSegment = (segment) => {
    if (tableContainerRef.current) {
      const rowHeight = 40
      const scrollTo = segment * rowHeight
      tableContainerRef.current.scrollTo({
        top: scrollTo,
        behavior: 'smooth'
      })
    }
  }

  const handleRemoveByKey = () => {
    if (!keyInput.trim()) {
      setMessage('–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è')
      return
    }

    setIsLoading(true)
    setTimeout(() => {
      try {
        const result = hashTable.remove(keyInput.trim())
        if (result.removed > 0) {
          setMessage(`‚úÖ –≠–ª–µ–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω: –∫–ª—é—á "${keyInput}" ‚Üí —Å–µ–≥–º–µ–Ω—Ç ${result.hash}. –û—Å—Ç–∞–ª–æ—Å—å —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å–µ–≥–º–µ–Ω—Ç–µ: ${result.remainingCount}`)
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —ç–ª–µ–º–µ–Ω—Ç—ã (–∫–æ–ª–ª–∏–∑–∏–∏)
          if (result.remainingCount > 0) {
            setTimeout(() => {
              const remainingKeys = result.remainingItems.map(item => item.key).join(', ')
              setMessage(prev => prev + `\nüîó –û—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–ª—é—á–∏ –≤ —Å–µ–≥–º–µ–Ω—Ç–µ: ${remainingKeys}`)
            }, 500)
          }
          
          setKeyInput('')
          updateDisplay()
        } else {
          setMessage(`‚ùå –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: –∫–ª—é—á "${keyInput}"`)
        }
      } catch (error) {
        setMessage(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${error.message}`)
      } finally {
        setIsLoading(false)
      }
    }, 300)
  }

  const handleExportToFile = () => {
    setIsLoading(true)
    setTimeout(() => {
      try {
        const csvData = hashTable.exportForHistogram()
        const blob = new Blob([csvData], { type: 'text/csv;charset=utf-8;' })
        const url = URL.createObjectURL(blob)
        const a = document.createElement('a')
        a.href = url
        a.download = 'hash_table_histogram.csv'
        a.click()
        URL.revokeObjectURL(url)
        
        setMessage('‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã –≤—ã–≥—Ä—É–∂–µ–Ω—ã –≤ hash_table_histogram.csv')
      } catch (error) {
        setMessage(`‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ${error.message}`)
      } finally {
        setIsLoading(false)
      }
    }, 500)
  }

  const handleBulkGenerate = () => {
    setIsLoading(true)
    setTimeout(() => {
      try {
        const result = hashTable.bulkAdd(2000) // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 100 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        setMessage(`‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: –¥–æ–±–∞–≤–ª–µ–Ω–æ ${result.added}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${result.updated}. –û—à–∏–±–æ–∫: ${result.errors.length}`)
        
        if (result.errors.length > 0) {
          setTimeout(() => {
            setMessage(prev => prev + `\n‚ö†Ô∏è –ü–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ: ${result.errors[0]}`)
          }, 500)
        }
        
        updateDisplay()
      } catch (error) {
        setMessage(`‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${error.message}`)
      } finally {
        setIsLoading(false)
      }
    }, 500)
  }

  const handleResetTable = () => {
    hashTable.reset()
    setLastOperation(null)
    setEncryptedKey('')
    setMessage('üóëÔ∏è –•–µ—à-—Ç–∞–±–ª–∏—Ü–∞ —Å–±—Ä–æ—à–µ–Ω–∞')
    updateDisplay()
  }

  const handleKeyPress = (e, action) => {
    if (e.key === 'Enter') {
      action()
    }
  }

  return (
    <div className={styles.container}>
      <div className={styles.name}>
        <h1>–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞ 4: –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö</h1>
      </div>

      <section className={styles.section}>
        <h2>–¶–µ–ª—å —Ä–∞–±–æ—Ç—ã:</h2>
        <p>–ò–∑—É—á–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞–≤—ã–∫–æ–≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Ö–µ—à-—Ç–∞–±–ª–∏—Ü.</p>
        
        <h2>–ó–∞–¥–∞–Ω–∏–µ (–í–∞—Ä–∏–∞–Ω—Ç 9):</h2>
        <p>
          <strong>–§–æ—Ä–º–∞—Ç –∫–ª—é—á–∞:</strong> –ë—Ü—Ü—Ü—Ü–ë (–ë—É–∫–≤–∞+4 —Ü–∏—Ñ—Ä—ã+–ë—É–∫–≤–∞)<br/>
          <strong>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤:</strong> 1500<br/>
          <strong>–ú–µ—Ç–æ–¥ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–æ–ª–ª–∏–∑–∏–π:</strong> –û—Ç–∫—Ä—ã—Ç–æ–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ (—Ü–µ–ø–æ—á–∫–∏)
        </p>

        <div className={styles.mainGroup}>
          <div className={styles.mainGroupText}>
            <span>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ö–µ—à-—Ç–∞–±–ª–∏—Ü–µ–π</span>
          </div>

          {/* –ë–ª–æ–∫ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ */}
          <div className={styles.inputGroup}>
            <div className={styles.taskInput}>
              <label>–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –∫–ª—é—á: </label>
              <input
                type="text"
                placeholder="–õ—é–±–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è..."
                value={textToEncrypt}
                onChange={(e) => setTextToEncrypt(e.target.value)}
                onKeyPress={(e) => handleKeyPress(e, encryptTextToKey)}
              />
            </div>
            
            <button 
              className={styles.buttonFillArray} 
              onClick={encryptTextToKey}
              disabled={isLoading}
            >
              {isLoading ? '–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ...' : '–ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –≤ –∫–ª—é—á'}
            </button>

            {encryptedKey && (
              <div className={styles.encryptedKey}>
                <span>–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á: <strong>{encryptedKey}</strong></span>
                <button 
                  className={styles.actionButton}
                  onClick={useEncryptedKey}
                >
                  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
                </button>
              </div>
            )}
          </div>

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ */}
          {lastOperation && (
            <div className={styles.lastOperation}>
              <h3>–ü–æ—Å–ª–µ–¥–Ω—è—è –æ–ø–µ—Ä–∞—Ü–∏—è:</h3>
              <div>–ö–ª—é—á: <strong>{lastOperation.key}</strong></div>
              <div>–°–µ–≥–º–µ–Ω—Ç: <strong>{lastOperation.hash}</strong></div>
              <div>–¢–∏–ø: <strong>{lastOperation.operation === 'added' ? '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ' : '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ'}</strong></div>
            </div>
          )}

          {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã */}
          <div className={styles.systemStats}>
            <div className={styles.statItem}>
              <div className={styles.statValue}>{stats.totalElements || 0}</div>
              <div className={styles.statLabel}>–í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤</div>
            </div>
            <div className={styles.statItem}>
              <div className={styles.statValue}>{stats.usedSegments || 0}</div>
              <div className={styles.statLabel}>–ó–∞–Ω—è—Ç–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤</div>
            </div>
            <div className={styles.statItem}>
              <div className={styles.statValue}>{stats.maxChainLength || 0}</div>
              <div className={styles.statLabel}>–ú–∞–∫—Å. –¥–ª–∏–Ω–∞ —Ü–µ–ø–æ—á–∫–∏</div>
            </div>
            <div className={styles.statItem}>
              <div className={styles.statValue}>{stats.loadFactor || '0.0'}%</div>
              <div className={styles.statLabel}>–ö–æ—ç—Ñ. –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è</div>
            </div>
            <div className={styles.statItem}>
              <div className={styles.statValue}>{stats.overflowSegments || 0}</div>
              <div className={styles.statLabel}>–ü–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã</div>
            </div>
          </div>

          {/* –ë–ª–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ */}
          <div className={styles.inputGroup}>
            <div className={styles.taskInput}>
              <label>–î–æ–±–∞–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ (–∞–≤—Ç–æ-–∫–ª—é—á): </label>
              <input
                type="text"
                placeholder="–õ—é–±–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ..."
                value={valueInput}
                onChange={(e) => setValueInput(e.target.value)}
                onKeyPress={(e) => handleKeyPress(e, handleAddValue)}
              />
            </div>
            
            <button 
              className={styles.buttonFillArray} 
              onClick={handleAddValue}
              disabled={isLoading}
            >
              {isLoading ? '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ...' : '–î–æ–±–∞–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ'}
            </button>
          </div>

          {/* –ë–ª–æ–∫ —Ä—É—á–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å –∫–ª—é—á–æ–º */}
          <div className={styles.inputGroup}>
            <div className={styles.taskInput}>
              <label>–ö–ª—é—á (–ë—Ü—Ü—Ü—Ü–ë): </label>
              <input
                type="text"
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: A1234Z"
                value={keyInput}
                onChange={(e) => setKeyInput(e.target.value.toUpperCase())}
                onKeyPress={(e) => handleKeyPress(e, handleAddWithKey)}
                maxLength={6}
              />
            </div>
            
            <div className={styles.taskInput}>
              <label>–ó–Ω–∞—á–µ–Ω–∏–µ: </label>
              <input
                type="text"
                placeholder="–õ—é–±–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ..."
                value={valueInput}
                onChange={(e) => setValueInput(e.target.value)}
                onKeyPress={(e) => handleKeyPress(e, handleAddWithKey)}
              />
            </div>
            
            <button 
              className={styles.actionButton} 
              onClick={handleAddWithKey}
              disabled={isLoading}
            >
              –î–æ–±–∞–≤–∏—Ç—å —Å –∫–ª—é—á–æ–º
            </button>
          </div>

          {/* –ë–ª–æ–∫ –ø–æ–∏—Å–∫–∞ */}
          <div className={styles.inputGroup}>
            <div className={styles.taskInput}>
              <label>–ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á—É: </label>
              <input
                type="text"
                placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –ë—Ü—Ü—Ü—Ü–ë"
                value={searchKeyInput}
                onChange={(e) => setSearchKeyInput(e.target.value.toUpperCase())}
                onKeyPress={(e) => handleKeyPress(e, handleSearchByKey)}
                maxLength={6}
              />
            </div>
            
            <button 
              className={styles.buttonFillArray} 
              onClick={handleSearchByKey}
              disabled={isLoading}
            >
              {isLoading ? '–ü–æ–∏—Å–∫...' : '–ù–∞–π—Ç–∏ –ø–æ –∫–ª—é—á—É'}
            </button>

            <div className={styles.taskInput}>
              <label>–ü–æ–∏—Å–∫ –ø–æ —Å–µ–≥–º–µ–Ω—Ç—É: </label>
              <input
                type="number"
                placeholder="0-1499"
                value={segmentSearch}
                onChange={(e) => setSegmentSearch(e.target.value)}
                min="0"
                max="1499"
                onKeyPress={(e) => handleKeyPress(e, handleSearchBySegment)}
              />
            </div>
            
            <button 
              className={styles.actionButton} 
              onClick={handleSearchBySegment}
              disabled={isLoading}
            >
              –ù–∞–π—Ç–∏ –≤ —Å–µ–≥–º–µ–Ω—Ç–µ
            </button>
          </div>

          {/* –ë–ª–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
          <div className={styles.inputGroup}>
            <div className={styles.taskInput}>
              <label>–£–¥–∞–ª–∏—Ç—å –ø–æ –∫–ª—é—á—É: </label>
              <input
                type="text"
                placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –ë—Ü—Ü—Ü—Ü–ë"
                value={keyInput}
                onChange={(e) => setKeyInput(e.target.value.toUpperCase())}
                onKeyPress={(e) => handleKeyPress(e, handleRemoveByKey)}
                maxLength={6}
              />
            </div>
            
            <button 
              className={styles.stopButton} 
              onClick={handleRemoveByKey}
              disabled={isLoading}
            >
              –£–¥–∞–ª–∏—Ç—å –ø–æ –∫–ª—é—á—É
            </button>

            <button 
              className={styles.buttonFillArray} 
              onClick={handleExportToFile}
              disabled={isLoading}
            >
              {isLoading ? '–≠–∫—Å–ø–æ—Ä—Ç...' : '–≠–∫—Å–ø–æ—Ä—Ç –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã'}
            </button>
            
            <button 
              className={styles.actionButton}
              onClick={handleBulkGenerate}
              disabled={isLoading}
            >
              –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å 2000 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            </button>
            
            <button 
              className={styles.stopButton} 
              onClick={handleResetTable}
            >
              –°–±—Ä–æ—Å —Ç–∞–±–ª–∏—Ü—ã
            </button>
          </div>

                    {/* –°–æ–æ–±—â–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã */}
          {message && (
            <div className={styles.result}>
              <span className={styles.resultText}>–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã</span>
              <div className={styles.resultContent}>
                {message.split('\n').map((line, index) => (
                  <div key={index}>{line}</div>
                ))}
              </div>
            </div>
          )}


          {/* –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ö–µ—à-—Ç–∞–±–ª–∏—Ü—ã */}
          <div className={styles.hashVisualization}>
            <h3>–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ö–µ—à-—Ç–∞–±–ª–∏—Ü—ã (–≤—Å–µ 1500 —Å–µ–≥–º–µ–Ω—Ç–æ–≤)</h3>
            <div className={styles.tableInfo}>
              –í—Å–µ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤: {tableItems.length}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–∫—Ä—É—Ç–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.
            </div>
            <div className={styles.hashTableContainer}>
              <div 
                className={styles.tableWrapper}
                ref={tableContainerRef}
              >
                <div className={styles.tableHeader}>
                  <span>–°–µ–≥–º–µ–Ω—Ç</span>
                  <span>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</span>
                  <span>–ö–ª—é—á ‚Üí –ó–Ω–∞—á–µ–Ω–∏–µ</span>
                </div>
                <div className={styles.tableContent}>
                  {tableItems.map((segmentInfo) => (
                    <div 
                      key={segmentInfo.segment} 
                      className={styles.tableRow}
                      id={`segment-${segmentInfo.segment}`}
                    >
                      <span className={styles.segmentNumber}>{segmentInfo.segment}</span>
                      <span className={styles.segmentCount}>
                        {segmentInfo.count} —ç–ª–µ–º–µ–Ω—Ç(–æ–≤)
                      </span>
                      <div className={styles.segmentItems}>
                        {segmentInfo.count > 0 ? (
                          segmentInfo.items.map((item, itemIndex) => (
                            <div key={itemIndex} className={styles.dataItem}>
                              <span className={styles.generatedKey}>{item.key}</span>
                              <span className={styles.arrow}>‚Üí</span>
                              <span className={styles.originalData}>"{item.value}"</span>
                            </div>
                          ))
                        ) : (
                          <span className={styles.empty}>–ü—É—Å—Ç–æ</span>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </div>


          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ */}
          <div className={styles.result}>
            <span className={styles.resultText}>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ</span>
            <div className={styles.resultContent}>
              <strong>–§–æ—Ä–º–∞—Ç –∫–ª—é—á–∞:</strong> –ë—Ü—Ü—Ü—Ü–ë (–ë—É–∫–≤–∞+4 —Ü–∏—Ñ—Ä—ã+–ë—É–∫–≤–∞)<br/>
              <strong>–ü—Ä–∏–º–µ—Ä—ã –∫–ª—é—á–µ–π:</strong> A1234Z, B5678X, C9012Y<br/>
              <strong>–ú–µ—Ç–æ–¥ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è:</strong> –û—Ç–∫—Ä—ã—Ç–æ–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ (—Ü–µ–ø–æ—á–∫–∏)<br/>
              <strong>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤:</strong> {stats.totalSegments || 1500}<br/>
              <strong>–ú–∞–∫—Å. –¥–ª–∏–Ω–∞ —Ü–µ–ø–æ—á–∫–∏:</strong> {stats.MAX_CHAIN_LENGTH || 5}<br/>
              <strong>–§—É–Ω–∫—Ü–∏–∏:</strong> –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π, —Ä—É—á–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ –∫–ª—é—á–µ–π, –ø–æ–∏—Å–∫, —É–¥–∞–ª–µ–Ω–∏–µ, —ç–∫—Å–ø–æ—Ä—Ç –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã
            </div>
          </div>
        </div>
      </section>
    </div>
  )
}

export default AlgLab4