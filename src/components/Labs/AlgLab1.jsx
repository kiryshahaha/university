'use client'

import React, { useState } from 'react'
import Image from 'next/image'
import styles from './AlgLab.module.css'
import TableLab1 from './TableLab1/TableLab1'

const AlgLab1 = () => {
    const [n, setN] = useState(10);
    const [minRange, setMinRange] = useState(0);
    const [maxRange, setMaxRange] = useState(0);
    const [array, setArray] = useState([]);
    const [evenCount, setEvenCount] = useState(0);
    const [showArrayInfo, setShowArrayInfo] = useState(false);
    const [showResult, setShowResult] = useState(false);
    const [result, setResult] = useState('');

    const fillArray = () => {
        if (n <= 0) {
            alert('–†–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º!')
            return
        }

        const maxR = Math.floor(n / 2);
        const minR = -(maxR - 1);

        setMinRange(minR);
        setMaxRange(maxR);

        const newArray = [];
        let evenCounter = 0;

        for (let i = 0; i < n; i++) {
            const randomValue = Math.floor(Math.random() * (maxR - minR + 1)) + minR;
            newArray.push(randomValue);

            if (randomValue % 2 === 0) {
                evenCounter++;
            }
        }

        setArray(newArray);
        setEvenCount(evenCounter);
        setShowArrayInfo(true);
        setShowResult(false);
        setResult('');
    };

    const calculateNegativeSum = () => {
        let sum = 0;
        let operations = 0;

        for (let i = 0; i < array.length; i++) {
            operations++;
            if (array[i] < 0) {
                sum += array[i];
            }
        }

        setResult(`–°—É–º–º–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${sum}\n–í—ã–ø–æ–ª–Ω–µ–Ω–æ –æ–ø–µ—Ä–∞—Ü–∏–π: ${operations}\n–°–ª–æ–∂–Ω–æ—Å—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º–∞: O(n)`);
        setShowResult(true);
    };

    const getEvenCount = () => {
        setResult(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ—Ç–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${evenCount}\n–í—ã–ø–æ–ª–Ω–µ–Ω–æ –æ–ø–µ—Ä–∞—Ü–∏–π: 1\n–°–ª–æ–∂–Ω–æ—Å—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º–∞: O(1)`);
        setShowResult(true);
    };

    const handleInputChange = (e) => {
        const value = parseInt(e.target.value);
        if (!isNaN(value) && value > 0) {
            setN(value);
        }
    };

    return (
        <div className={styles.container}>
            <div className={styles.name}>
                <h1>–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞ 1: –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤</h1>
            </div>

            <section className={styles.section}>
                <h2>–¶–µ–ª—å —Ä–∞–±–æ—Ç—ã:</h2>
                <p>–ò–∑—É—á–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞–≤—ã–∫–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤.</p>

                <h2>–ó–∞–¥–∞–Ω–∏–µ:</h2>
                <p>–ò—Å–ø–æ–ª—å–∑—É—è –ø–∞–º—è—Ç—å, –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é n, —Ö—Ä–∞–Ω–∏—Ç—å –º–∞—Å—Å–∏–≤ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª A, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π n —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
                    –≠–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ A –º–æ–≥—É—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç -((n div 2) - 1) –¥–æ (n div 2).
                    –†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º, –∫–æ—Ç–æ—Ä—ã–π –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ A —Å–ª—É—á–∞–π–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏,
                    –∏ –ø–æ –≤—ã–±–æ—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–Ω—É –∏–∑ –¥–≤—É—Ö —Ñ—É–Ω–∫—Ü–∏–π.</p>

                <div className={styles.tableContainer}>
                    <TableLab1 />
                </div>


                <div className={styles.mainGroup}>
                    <div className={styles.mainGropText}>
                        <span>–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è</span>
                    </div>

                    <div className={styles.inputGroup}>
                        <div className={styles.arraySizeInput}>
                            <label>–†–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞ (n):</label>
                            <input
                                type='number'
                                value={n}
                                onChange={handleInputChange}
                                min="1"
                            />
                        </div>
                        <button className={styles.buttonFillArray} onClick={fillArray}>
                            –ó–∞–ø–æ–ª–Ω–∏—Ç—å –º–∞—Å—Å–∏–≤
                        </button>
                    </div>

                    {showArrayInfo && (
                        <>
                            <div className={styles.arrayInfo}>
                                <div className={styles.arrayDisplay}>
                                    <strong>–ú–∞—Å—Å–∏–≤:</strong> [{array.join(', ')}]
                                </div>
                                <div>
                                    <strong>–î–∏–∞–ø–∞–∑–æ–Ω:</strong><br />–æ—Ç {minRange} –¥–æ {maxRange}
                                </div>
                                <div>
                                    <strong>–†–∞–∑–º–µ—Ä:</strong><br />{n} —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                                </div>
                            </div>

                            <div className={styles.buttonGroup}>
                                <span>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</span>
                                <button className={styles.actionButton} onClick={calculateNegativeSum}>
                                    ‚àë –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                                </button>
                                <button className={styles.actionButton} onClick={getEvenCount}>
                                    üî¢ –ß–µ—Ç–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                                </button>
                            </div>
                        </>
                    )}

                    {showResult && (
                        <div className={styles.result}>
                            <span className={styles.resultText}>–†–µ–∑—É–ª—å—Ç–∞—Ç</span>
                            <div className={styles.resultContent}>{result}</div>
                        </div>
                    )}
                </div>
            </section>
        </div>
    )
}

export default AlgLab1